name: Build and Push Docker Images

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: writenotenow/r2-bucket-manager

permissions:
  contents: read
  packages: write
  security-events: write  # For security scanning
  pull-requests: write    # For PR comments
  id-token: write        # For supply chain attestations
  attestations: write    # For generating attestations

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
      pull-requests: write
      id-token: write
      attestations: write
      deployments: write  # Required for deployment tracking
    
    environment:
      name: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/main' && 'production' || '' }}
      url: https://hub.docker.com/r/writenotenow/r2-bucket-manager

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      continue-on-error: true  # Don't fail if Docker Hub credentials are missing
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Read version from README
      id: version
      run: |
        # Extract version from README.md (format: **Version:** 1.2.0)
        VERSION=$(grep -oP '(?<=\*\*Version:\*\* )[0-9.]+' README.md | head -1)
        if [ -z "$VERSION" ]; then
          VERSION="1.2.0"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Detected version: $VERSION"
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        flavor: |
          latest=auto
        tags: |
          # When pushing Git tag v1.2.0, create only: v1.2.0 (exact version)
          type=semver,pattern=v{{version}}
          # When pushing to main branch, use version from README + latest
          type=raw,value=v${{ steps.version.outputs.version }},enable={{is_default_branch}}
          type=raw,value=latest,enable={{is_default_branch}}
          # SHA-pinned tags for security (reduced to first 12 chars for faster upload)
          type=sha,prefix=sha-,format=short

    # Build locally first for security scanning (single platform)
    - name: Build Docker image for scanning
      uses: docker/build-push-action@v6
      with:
        context: .
        file: Dockerfile
        platforms: linux/amd64  # Single platform for scanning
        push: false
        load: true
        tags: local-scan:latest
        cache-from: type=gha

    # Security scanning with Docker Scout CLI
    - name: Docker Scout security scan
      timeout-minutes: 10  # Prevent hanging
      run: |
        # Install Docker Scout CLI
        curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s --
        
        # Verify image exists
        docker images local-scan:latest
        
        # Run security scan - block vulnerabilities above medium level (critical, high)
        echo "üîç Running Docker Scout security scan for local-scan:latest"
        
        # Run scan with timeout and capture output to analyze
        echo "‚è±Ô∏è Running Docker Scout scan (max 8 minutes)..."
        if timeout 480 docker scout cves local-scan:latest > scout_output.txt 2>&1; then
          echo "üìä Scan completed successfully"
          cat scout_output.txt
          
          # Check if critical or high vulnerabilities are present in the output
          if grep -E "(CRITICAL|HIGH)" scout_output.txt | grep -v "0  " > /dev/null; then
            echo "‚ùå Critical or high severity vulnerabilities detected"
            echo "üö® Build blocked due to unacceptable security risk"
            exit 1
          else
            echo "‚úÖ Security scan passed - no critical/high severity vulnerabilities"
            echo "‚ÑπÔ∏è Low/medium severity vulnerabilities are acceptable"
          fi
        else
          echo "‚ö†Ô∏è Docker Scout scan timed out or failed"
          echo "üîÑ Continuing build - scan timeout is not a security failure"
          echo "‚ÑπÔ∏è Consider running scout scan locally for large images"
        fi

    # Test local image before pushing to Docker Hub
    - name: Test Docker image functionality
      run: |
        echo "Testing local image before push..."
        docker run --rm local-scan:latest node --version
        echo "‚úÖ Image tests passed - safe to push"

    # Only push if security scan AND functionality test pass
    - name: Build and push Docker image
      if: success()  # Only runs if scan AND test passed
      id: build
      uses: docker/build-push-action@v6
      with:
        context: .
        file: Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        # Enable attestations for supply chain security
        provenance: mode=max
        sbom: true

    # Update Docker Hub description (optional - can be done manually)
    - name: Update Docker Hub Description
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: peter-evans/dockerhub-description@v5
      continue-on-error: true
      timeout-minutes: 5
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: ${{ env.IMAGE_NAME }}
        readme-filepath: ./DOCKER_README.md
        short-description: "Manage Cloudflare R2 buckets ‚Äî drag-drop uploads, batch copy/move/delete, share links, GitHub SSO"
    
    - name: Deployment Summary
      if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        echo "‚úÖ Successfully published Docker images to production"
        echo "üê≥ Registry: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        echo "üè∑Ô∏è Tags: ${{ steps.meta.outputs.tags }}"
        echo "üìù Commit: ${{ github.sha }}"
        echo "üë§ Published by: ${{ github.actor }}"

